{"ast":null,"code":"var _jsxFileName = \"/home/xoai/Chatbot/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    checkAuth();\n  }, []);\n  const checkAuth = async () => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const response = await authAPI.getMe();\n        setUser(response.data);\n      } catch (error) {\n        localStorage.removeItem('token');\n      }\n    }\n    setLoading(false);\n  };\n  const login = async credentials => {\n    const response = await authAPI.login(credentials);\n    localStorage.setItem('token', response.data.access_token);\n    setUser(response.data.user);\n    return response.data;\n  };\n  const register = async userData => {\n    const response = await authAPI.register(userData);\n    localStorage.setItem('token', response.data.access_token);\n    setUser(response.data.user);\n    return response.data;\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","authAPI","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","checkAuth","token","localStorage","getItem","response","getMe","data","error","removeItem","login","credentials","setItem","access_token","register","userData","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/xoai/Chatbot/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { authAPI } from '../services/api';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const checkAuth = async () => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const response = await authAPI.getMe();\n        setUser(response.data);\n      } catch (error) {\n        localStorage.removeItem('token');\n      }\n    }\n    setLoading(false);\n  };\n\n  const login = async (credentials) => {\n    const response = await authAPI.login(credentials);\n    localStorage.setItem('token', response.data.access_token);\n    setUser(response.data.user);\n    return response.data;\n  };\n\n  const register = async (userData) => {\n    const response = await authAPI.register(userData);\n    localStorage.setItem('token', response.data.access_token);\n    setUser(response.data.user);\n    return response.data;\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n  };\n\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,OAAO,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGR,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAE5CE,SAAS,CAAC,MAAM;IACdgB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACT,IAAI;QACF,MAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAACoB,KAAK,CAAC,CAAC;QACtCR,OAAO,CAACO,QAAQ,CAACE,IAAI,CAAC;MACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;MAClC;IACF;IACAT,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,MAAMU,KAAK,GAAG,MAAOC,WAAW,IAAK;IACnC,MAAMN,QAAQ,GAAG,MAAMnB,OAAO,CAACwB,KAAK,CAACC,WAAW,CAAC;IACjDR,YAAY,CAACS,OAAO,CAAC,OAAO,EAAEP,QAAQ,CAACE,IAAI,CAACM,YAAY,CAAC;IACzDf,OAAO,CAACO,QAAQ,CAACE,IAAI,CAACV,IAAI,CAAC;IAC3B,OAAOQ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMO,QAAQ,GAAG,MAAOC,QAAQ,IAAK;IACnC,MAAMV,QAAQ,GAAG,MAAMnB,OAAO,CAAC4B,QAAQ,CAACC,QAAQ,CAAC;IACjDZ,YAAY,CAACS,OAAO,CAAC,OAAO,EAAEP,QAAQ,CAACE,IAAI,CAACM,YAAY,CAAC;IACzDf,OAAO,CAACO,QAAQ,CAACE,IAAI,CAACV,IAAI,CAAC;IAC3B,OAAOQ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMS,MAAM,GAAGA,CAAA,KAAM;IACnBb,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;IAChCX,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,MAAMmB,KAAK,GAAG;IACZpB,IAAI;IACJE,OAAO;IACPW,KAAK;IACLI,QAAQ;IACRE;EACF,CAAC;EAED,oBAAO5B,OAAA,CAACC,WAAW,CAAC6B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAtB,QAAA,EAAEA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAAC1B,GAAA,CAjDWF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}